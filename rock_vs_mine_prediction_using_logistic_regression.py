# -*- coding: utf-8 -*-
"""Rock VS Mine Prediction using Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n5l8kZZBlZVlKxt04KV73HDLCzTmc7fD

Md Ibrahim Mamun
MSc Computing and Technology with Advanced Practice, Northumbria University, UK.
BSC Computer Science and technology, University of Asia Pacific, Bangladesh.
Email: mamun.cs104@gmail.com

// Importing Libraries
- numpy is mainly for RS
- pandas is for several data processing steps
- for data set splitting, 3rd number import.
- 4th import for Logistic Regression
- 5th for measure accuracy
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""// Data Collection & Processing
- As dataset no header, we need to mention
- Copy Path then Paste it between the quotes.
"""

#Loading the dataset to a PANDAS Dataframe
sonar_data = pd.read_csv('/content/sonar data.csv', header = None)

"""// Lets have a look on the dataset
- Head funtion print the first 5 rows
"""

sonar_data.head()

# Number of Rows & Columns
# shape gives us column and rows number
sonar_data.shape

# for each column- mean, std, max, 50% etc (statistical measures)
sonar_data.describe()

#how many for rocks // how many for metal
#as it only on 60th column
sonar_data[60].value_counts()

# Metal & Rock,, means for all the comlumns
# That means , Joto Gula R(Rock) ache, sobar 1st column er Mean, 2nd column er Mean!!
sonar_data.groupby(60).mean()

#Lets seperate data and Labels
# As this is a supervised learning, therefore label present
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""- Test Size = 0.1 means,, 10% data will be for TEST,,,,,, 0.2 means 20%
- stratify = y, means we will have equal number of ROcks and Mines
- random state=1, split the dataset into a particular order,, reproduce as it is
"""

# Training and Test data
# here we are getting 187 test and 21 train data from total 208 DATA
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.1, stratify=Y, random_state=1)
print(X.shape, X_train.shape, X_test.shape)

"""// Lets see the test and training data"""

print(X_train)
print(Y_train)

print(X_test)
print(Y_test)

"""// Lets Train the Model"""

#Using Logistic Regression Model
model = LogisticRegression()

#training the LR model with training data
model.fit(X_train, Y_train)

"""// Accuracy check"""

#Accuracy on training data,,, TRAINING kintuuuu
# Mane, again same training data diye test kortesi, but Y toh same e training er , jar sathe compare korbo
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

#Printing
print('Accuracy on the Training Data = ', training_data_accuracy)

# Accuracy on TEST DATA

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

#Printinggg
print('Accuracy on the TEST Data = ', test_data_accuracy)

"""// MAKING the PREDICTIVE SYSTEM for Individual Instances
- Mane jodi single akta line Input dei, seta ROCK naki METAL seta Predict korbe
- Notepad diye dataset open kore, randomly akta line select korlam
"""

input_data=(0.0286,0.0453,0.0277,0.0174,0.0384,0.0990,0.1201,0.1833,0.2105,0.3039,0.2988,0.4250,0.6343,0.8198,1.0000,0.9988,0.9508,0.9025,0.7234,0.5122,0.2074,0.3985,0.5890,0.2872,0.2043,0.5782,0.5389,0.3750,0.3411,0.5067,0.5580,0.4778,0.3299,0.2198,0.1407,0.2856,0.3807,0.4158,0.4054,0.3296,0.2707,0.2650,0.0723,0.1238,0.1192,0.1089,0.0623,0.0494,0.0264,0.0081,0.0104,0.0045,0.0014,0.0038,0.0013,0.0089,0.0057,0.0027,0.0051,0.0062)
#Chaning the Input data to a NUMPY Array
input_data_as_numpy_array = np.asarray(input_data)


# Reshape the NUMPY Array as we are predicting for Just ONE Instance
input_data_reshapred = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshapred)
print(prediction)

if(prediction[0]=='R'):
  print('The object is ROCK')
else:
  print('The object is MINE')

#One for MINE
input_data=(0.0307,0.0523,0.0653,0.0521,0.0611,0.0577,0.0665,0.0664,0.1460,0.2792,0.3877,0.4992,0.4981,0.4972,0.5607,0.7339,0.8230,0.9173,0.9975,0.9911,0.8240,0.6498,0.5980,0.4862,0.3150,0.1543,0.0989,0.0284,0.1008,0.2636,0.2694,0.2930,0.2925,0.3998,0.3660,0.3172,0.4609,0.4374,0.1820,0.3376,0.6202,0.4448,0.1863,0.1420,0.0589,0.0576,0.0672,0.0269,0.0245,0.0190,0.0063,0.0321,0.0189,0.0137,0.0277,0.0152,0.0052,0.0121,0.0124,0.0055)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshapred = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshapred)
print(prediction)

if(prediction[0]=='R'):
  print('The object is ROCK')
else:
  print('The object is MINE')